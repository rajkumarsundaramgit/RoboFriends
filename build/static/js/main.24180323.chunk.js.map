{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","ind","key","SearchBox","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAaeA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACC,yBAAKC,UAAU,uDACZ,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,EAAL,KACA,2BAAIC,MCKCK,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKT,GAAIK,EAAOI,GAAKT,GAAIF,KAAMO,EAAOI,GAAKX,KAAMC,MAAOM,EAAOI,GAAKV,WAEpF,OACF,6BACEO,ICGWK,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACC,yBAAKX,UAAU,OACd,2BAAOA,UAAU,mCACjBY,KAAK,SACLC,SAAUF,EACVG,YAAY,oBCCHC,EAPA,SAACC,GACZ,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAClEJ,EAAMK,WCyCEC,G,kBAvCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACZzB,OAAQ,GACRsB,YAAa,IAJD,E,iFAQO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAErB,OAAQ8B,S,+BAM/B,IAAD,EACsBC,KAAKN,MAA5BzB,EADC,EACDA,OAAQsB,EADP,EACOA,YACTU,EAAiBhC,EAAOiC,QAAO,SAAAjC,GACjC,OAAOA,EAAOP,KAAKyC,cAAcC,SAASb,EAAYY,kBAGvD,OAAIlC,EAAOoC,OAIV,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQgC,MAPf,8C,GAzBIK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACGC,SAASC,eAAe,SDwHzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.24180323.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n    \t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      \t\t<img alt='robots' src={`https://robohash.org/${id}?100x100`} />\n      \t\t<div>\n        \t\t<h2>{name} </h2>\n        \t\t<p>{email}</p>        \n      \t\t</div>\n    \t</div>\n  \t);\n}\nexport default Card;\n","import React from 'react';\nimport Card from '../components/Card'\n\nconst CardList = ({robots}) => {\n\tconst cardArray = robots.map((user, ind) => {\n\t\treturn <Card key={ind} id={robots[ind].id} name={robots[ind].name} email={robots[ind].email} />\n\t})\n    return (\n\t\t<div>\n\t\t\t{cardArray}\n\t\t</div>\t\n  \t);\n}\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n    \t<div className='pa2'>\n    \t\t<input className='pa3 ba b--green bg-lightest-blue'\n    \t\ttype='search' \n    \t\tonChange={searchChange}\n    \t\tplaceholder='search robots' />\n    \t</div>\t\n  \t);\n}\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    \t<div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\n    \t\t{props.children}\n    \t</div>\n  \t);\n}\nexport default Scroll;\n","import React, { Component }  from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\n\nclass App extends Component { \n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\t\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\trender() {\n\t\tconst {robots, searchfield} = this.state\n\t\tconst filteredRobots = robots.filter(robots => {\n    \t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\n    \t})\t\n\n    \tif(!robots.length) {\n    \t  return <h1>Loading...</h1>\n    \t} else {\n\t\t  return (\n\t\t    <div className='tc'>\n\t\t        <h1 className='f1'>RoboFriends</h1>\n\t\t        <SearchBox searchChange={this.onSearchChange}/>\n\t\t        <Scroll>\n\t\t        \t<CardList robots={filteredRobots} />\n\t\t        </Scroll>\n\t\t    </div>\n\t\t  );\n\t\t}\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t\t\t\t<App />\t\n\t\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}